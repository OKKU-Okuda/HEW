/**********************************************************************
[[playerプログラム(player.cpp)]]
	作者：奥田　真規

	playerに関するプログラム
***********************************************************************/
#include "player.h"	

#include "../Core/input.h"
#include "../Core/directx_Helper3D.h"
#include "../Core/debugproc.h"
//---------------------------------------------------------------------
//	マクロ定義(同cpp内限定)
//---------------------------------------------------------------------


// プレイヤーの基本立ち位置
#define PLAYER_POSFROMZ	(6000.0f)
#define PLAYER_POSTOZ	(-110.0f)
#define PLAYER_DISZ		(PLAYER_POSFROMZ - PLAYER_POSTOZ)
#define PLAYER_POSRATE	(0.05f)
#define PLAYER_ROT		(&Vec3(0, 0.3f, 0))

//---------------------------------------------------------------------
//	構造体、列挙体、共用体宣言(同cpp内限定)
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//	プロトタイプ宣言(同cpp内限定)
//---------------------------------------------------------------------
static void InitTitlePlayer(bool isFirst);
static void UninitTitlePlayer(bool isEnd);
static void UpdateTitlePlayer();
static void DrawTitlePlayer();

//---------------------------------------------------------------------
//	グローバル変数
//---------------------------------------------------------------------

// 画面遷移基本関数群をまとめておく
static OBJ_FUNC g_Func = { InitTitlePlayer,UninitTitlePlayer,NoFunction,DrawTitlePlayer };

static Model		g_model;	// プレイヤーモデル
static float		g_sclYrot;	// 大きくする演出の際の絶対値サイン関数
static float		g_posZadd;	// 基本値から加算したZ位置		

/*=====================================================================
player更新関数
=====================================================================*/
void UpdateTitlePlayer()
{
	float sclY = 1.0f;

	// プレイヤーの更新(大きさ演出と急に近づく演出)
	g_sclYrot += 0.079f;
	sclY += fabsf(sinf(g_sclYrot)) * 0.07f;
	g_posZadd = (PLAYER_DISZ - g_posZadd) * PLAYER_POSRATE + g_posZadd;
	GetMatrix(&g_model->WldMtx, &Vec3(0.0f, -30.0f, PLAYER_POSFROMZ - g_posZadd), PLAYER_ROT, &Vec3(1.0f, sclY, 1.0f));// プレイヤー立ち位置


	// プレイヤー位置の表示
	Vec4 vc(g_model->WldMtx.m[3]);
	PrintDebugProc("プレイヤー位置:%vec4", vc);

}

/*=====================================================================
player描画関数
=====================================================================*/
void DrawTitlePlayer()
{
	DrawModel(g_model);
}

/*=====================================================================
player初期化関数
	戻り値 : void
	引数 :
	bool isFirst		true:リソース読み込み系を含めた初期化処理を行う
							　※ この処理がある場合はmain.cpp内の		  ※
							  ※ InitGameResource関数に引数trueで書くこと ※

						false;リソース開放系以外の初期化処理を行う
=====================================================================*/
void InitTitlePlayer(bool isFirst)
{
	if (isFirst == true)
	{
		//---------------------------------------------------------------------
		//	リソース読み込み処理(Create???,Load???,シリーズ)
		//---------------------------------------------------------------------
		// プレイヤーのモデル読み込み
		g_model = CreateModel("data/MODEL/Player.x");

		return;
	}

	//---------------------------------------------------------------------
	//	グローバル変数等のステータス書き換え処理
	//---------------------------------------------------------------------

	// プレイヤーの数値入れ替え
	g_sclYrot = 0.0f;
	g_posZadd = 0.0f;
	GetMatrix(&g_model->WldMtx, &Vec3(0.0f, 0.0f, PLAYER_POSFROMZ), PLAYER_ROT);// プレイヤー立ち位置
    
	g_Func = { InitTitlePlayer,UninitTitlePlayer,NoFunction,DrawTitlePlayer };

}

/*=====================================================================
player終了化関数
	戻り値 : void
	引数 :
	bool isEnd			true:リソース開放系を含めた終了化処理を行う
							　※ この処理がある場合はmain.cpp内の		    ※
							  ※ UninitGameResource関数に引数trueで書くこと ※

						false;リソース開放系以外の終了化処理を行う	
=====================================================================*/
void UninitTitlePlayer(bool isEnd)
{
	//---------------------------------------------------------------------
	//	その他の終了処理
	//---------------------------------------------------------------------
	if (isEnd == false)
	{
		return;
	}

	//---------------------------------------------------------------------
	//	リソース開放処理
	//---------------------------------------------------------------------
	DeleteModel(&g_model);
	
}

/*=====================================================================
player基本関数群取得関数
=====================================================================*/
OBJ_FUNC* GetPlayerFunc()
{
	return &g_Func;
}

/*=====================================================================
player位置取得関数(行列経由)
=====================================================================*/
Vec3* GetPlayerPosition()
{
	return (Vec3*)(g_model->WldMtx.m[3]);
}

/*=====================================================================
player更新関数アクティブ
=====================================================================*/
void SetPlayerFuncActive()
{
	g_Func.Update = UpdateTitlePlayer;
}