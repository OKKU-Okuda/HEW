/**********************************************************************
[[TackleEnemyプログラム(TackleEnemy.cpp)]]
	作者：奥田　真規

	TackleEnemyに関するプログラム
***********************************************************************/
#include"../Core/main.h"
#include "../Core/input.h"

#include "enemy.h"	
#include"player.h"
//---------------------------------------------------------------------
//	マクロ定義(同cpp内限定)
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//	構造体、列挙体、共用体宣言(同cpp内限定)
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//	プロトタイプ宣言(同cpp内限定)
//---------------------------------------------------------------------

// 基本関数群
static void InitTackleEnemy(bool isFirst);
static void UninitTackleEnemy(bool isEnd);
static void UpdateTackleEnemy();
static void DrawTackleEnemy();
//---------------------------------------------------------------------
//	グローバル変数
//---------------------------------------------------------------------

// 画面遷移基本関数群をまとめておく
static OBJ_FUNC g_Func = { InitTackleEnemy,UninitTackleEnemy,UpdateTackleEnemy,DrawTackleEnemy };

// エネミーモデル
static Model	g_modelEnemy;

/*=====================================================================
TackleEnemy更新関数
=====================================================================*/
void UpdateTackleEnemy()
{
	PLAYER *player = GetPlayer();

	// プレイヤーの横にエネミーを描画するようにする
	g_modelEnemy->WldMtx._41 = player[0].pos.x + 30.0f;
	g_modelEnemy->WldMtx._42 = player[0].pos.y;
	g_modelEnemy->WldMtx._43 = player[0].pos.z;

	GetMatrix(&g_modelEnemy->WldMtx, &GetPlayer()->pos, &Vec3(0, 0, 0), &Vec3(2, 2, 20));
}

/*=====================================================================
TackleEnemy描画関数
=====================================================================*/
void DrawTackleEnemy()
{
	DrawModel(g_modelEnemy);
}

/*=====================================================================
TackleEnemy初期化関数
	戻り値 : void
	引数 :
	bool isFirst		true:リソース読み込み系を含めた初期化処理を行う
							　※ この処理がある場合はmain.cpp内の		  ※
							  ※ InitGameResource関数に引数trueで書くこと ※

						false;リソース開放系以外の初期化処理を行う
=====================================================================*/
void InitTackleEnemy(bool isFirst)
{
	if (isFirst == true)
	{
		//---------------------------------------------------------------------
		//	リソース読み込み処理(Create???,Load???,シリーズ)
		//---------------------------------------------------------------------

		// エネミーモデルの読み込み
		g_modelEnemy = CreateModel("data/MODEL/enemy.x");
		return;
	}

	//---------------------------------------------------------------------
	//	グローバル変数等のステータス書き換え処理
	//---------------------------------------------------------------------
}

/*=====================================================================
TackleEnemy終了化関数
	戻り値 : void
	引数 :
	bool isEnd			true:リソース開放系を含めた終了化処理を行う
							　※ この処理がある場合はmain.cpp内の		    ※
							  ※ UninitGameResource関数に引数trueで書くこと ※

						false;リソース開放系以外の終了化処理を行う	
=====================================================================*/
void UninitTackleEnemy(bool isEnd)
{
	//---------------------------------------------------------------------
	//	その他の終了処理
	//---------------------------------------------------------------------





	if (isEnd == false)
	{
		return;
	}

	//---------------------------------------------------------------------
	//	リソース開放処理
	//---------------------------------------------------------------------


	// モデル開放
	DeleteModel(&g_modelEnemy);

}

/*=====================================================================
TackleEnemy基本関数群取得関数
=====================================================================*/
OBJ_FUNC* GetTackleEnemyFunc()
{
	return &g_Func;
}