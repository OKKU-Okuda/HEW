/**********************************************************************
[[リスト管理ヘッダー(MyList.h)]]
	作者：奥田　真規

	MyList.cppに関するヘッダー
***********************************************************************/
#pragma once
#include <Windows.h>

#define MAX_POOL	(32)	// 未使用オブジェクトとして保管する最大数(defa)

//---------------------------------------------------------------------
//	構造体、列挙体、共用体宣言 (他cppでも使用する)
//---------------------------------------------------------------------


// リスト構造体
typedef struct LIST {
	void	*Public_pt;	// リストオブジェクト全体で使用するデータ群
	DWORD	numObj;		// オブジェクト数

}LIST;

// リストのタイプ宣言
typedef LIST*	MyList;

//---------------------------------------------------------------------
//	プロトタイプ宣言 (他cppでも使用する)
//---------------------------------------------------------------------

//----------------------------------------------------------------
// (関数)リスト機能作成、削除関数
//----------------------------------------------------------------

/*=====================================================================
リスト機能作成関数
	リストを使用するために準備する関数。リストごとに用意する
	戻り値:MyList
	引数；
	size_t ObjectSize,	: リスト1要素当たりの大きさ
						（オブジェクトごとに変異するサイズを除く）
	DWORD numPool		: オブジェクトプール数(使わなくなったオブジェクトを一時保存する)
							(必須でないが32になる)
	size_t PublicSize	: 共有データの大きさ（必須でない）
=====================================================================*/
MyList MyListCreate(size_t ObjectSize, DWORD numPool = MAX_POOL,
		size_t PublicSize = 0);

/*=====================================================================
リスト機能削除関数
	全てのリストオブジェクトを開放してリスト機能を削除する関数
	戻り値:void
	引数；
	MyList* DelList : 削除するリスト（関数実行後NULLが入る）
=====================================================================*/
void MyListDelete(MyList *DelList);

//----------------------------------------------------------------
// （関数）リストオブジェクト追加、排除関数
//----------------------------------------------------------------

/*=====================================================================
リストオブジェクト変異サイズ変更関数
	オブジェクトごとにある変異メモリサイズを変更する関数

	戻り値:void*  : 新たに変わった可能性のあるオブジェクトアドレス
	引数；
	MyList list,			: リスト機能
	void *work_pt,			：オブジェクトアドレス
	size_t DynamicSize		: 新たな変異サイズ
=====================================================================*/
void *MyListChangeDynamicSize(MyList list, void *work_pt, size_t nSize);

/*=====================================================================
リストオブジェクト作成関数
	指定オブジェクトの前後にリストオブジェクトを作成する関数
	戻り値:void*  : 作成したリストの先頭アドレス
	引数；
	MyList list,			: リスト機能
	void *work_pt,			：前後にリストを作るための元となるオブジェクトアドレス
	bool isNext,			: (true)上引数の次オブジェクトとして作成する
							(false) 同上前オブジェクトとして作成する
	size_t DynamicSize		: オブジェクトごとにサイズが異なる確保サイズ(必須でない)
=====================================================================*/
void *MyListCreateObject(MyList list, void *work_pt, bool isNext, size_t DynamicSize = 0);

/*=====================================================================
リストオブジェクト先頭箇所作成関数
	リストの先頭にオブジェクトを作成する関数
	戻り値:void*  : 作成したリストの先頭アドレス
	引数；
	MyList list,			: リスト機能
	size_t DynamicSize		: オブジェクトごとにサイズが異なる確保サイズ(必須でない)
=====================================================================*/
void *MyListCreateObjectTop(MyList list, size_t DynamicSize = 0);

/*=====================================================================
リストオブジェクト終端箇所作成関数
	リストの終端にオブジェクトを作成する関数
	戻り値:void*  : 作成したリストの先頭アドレス
	引数；
	MyList list,			: リスト機能
	size_t DynamicSize		: オブジェクトごとにサイズが異なる確保サイズ(必須でない)
=====================================================================*/
void *MyListCreateObjectBottom(MyList list, size_t DynamicSize = 0);

/*=====================================================================
リストオブジェクト削除関数
	指定オブジェクトを削除する関数
	戻り値:void
	引数；
	MyList list,			: リスト機能
	void **del_pt			: 削除する対象のオブジェくと（実行後NULLが入る）
=====================================================================*/
void MyListDeleteObject(MyList list, void **del_pt);

/*=====================================================================
リストオブジェクト先頭箇所削除関数
	リストの先頭オブジェクトを削除する関数
	戻り値:void
	引数；
	MyList list,			: リスト機能
=====================================================================*/
void MyListDeleteObjectTop(MyList list);

/*=====================================================================
リストオブジェクト終端箇所削除関数
	リストの終端オブジェクトを削除する関数
	戻り値:void
	引数；
	MyList list,			: リスト機能
=====================================================================*/
void MyListDeleteObjectBottom(MyList list);

/*=====================================================================
リストオブジェクト全部削除関数
	リストのオブジェクトを全て削除する関数
	戻り値:void
	引数；
	MyList list,			: リスト機能
=====================================================================*/
void MyListDeleteObjectAll(MyList list);

//----------------------------------------------------------------
// リストオブジェクト巡回機能関数
//----------------------------------------------------------------

/*=====================================================================
リストIterator設置指定関数
	リストを巡回する為のイテレータを設置指定し巡回方向を指定する関数
	戻り値:void
	引数；
	MyList list,			: リスト機能
	void *pStart,			: 先頭のアドレス
	bool isFromTop			: (true)先頭から終端の順で巡回するフラグを立てる
							(false) 終端から先頭の順で巡回するフラグを立てる
=====================================================================*/
void MyListSetIterator(MyList list, void *pStart, bool isFromTop);

/*=====================================================================
リストIterator設置関数
	リストを巡回する為のイテレータを設置し巡回方向を指定する関数
	戻り値:void
	引数；
	MyList list,			: リスト機能
	bool isSetTop			: (true)リストの先頭に設置する
									先頭から終端の順で巡回するフラグを立てる
							(false) 終端に設置する
									終端から先頭の順で巡回するフラグを立てる
=====================================================================*/
void MyListResetIterator(MyList list, bool isSetTop);

/*=====================================================================
リスト巡回関数
	リストを巡回仕切るまでtrueを返し、イテレータを進める関数
	while分の条件部に入れることでリストをすべて巡回することが可能
	戻り値:bool
					true:リストの巡回はまだ終わっていない
					false;リストの巡回は終了
	引数；
	MyList list,			: リスト機能
	void** work_pt			: 現在回しているIteratorのオブジェクトが返る
=====================================================================*/
bool MyListLoop(MyList list, void** work_pt);

/*=====================================================================
リスト先頭オブジェクト取得関数
	戻り値: void * 先頭オブジェクトアドレス
	引数；
	MyList list,			: リスト機能
=====================================================================*/
void *MyListGetTopObject(MyList list);

/*=====================================================================
リスト終端オブジェクト取得関数
	戻り値: void * 終端オブジェクトアドレス
	引数；
	MyList list,			: リスト機能
=====================================================================*/
void *MyListGetBottomObject(MyList list);

/*=====================================================================
リストオブジェクトスワップ関数
	２つのオブジェクトを順番上入れ替える関数
	メモリ上では入れ替えない
	戻り値:void
	引数；
	MyList list,			: リスト機能
	void* pObj1,			: 1番オブジェクト
	void* pObj2				: 2番オブジェクト
=====================================================================*/
void MyListSwap(MyList list, void* pObj1, void* pObj2);

/*=====================================================================
リストオブジェクト先頭設置関数
	リスト上にあるオブジェクト一つを先頭に持ってくる
	メモリ上では入れ替えない
	戻り値:void
	引数；
	MyList list,			: リスト機能
	void* pObject,			: 先頭に持ってきたいリスト上に存在するオブジェクト
=====================================================================*/
void MyListSetTopObject(MyList list, void* pObject);

/*=====================================================================
リストオブジェクト終端設置関数
	リスト上にあるオブジェクト一つを終端に持ってくる
	メモリ上では入れ替えない
	戻り値:void
	引数；
	MyList list,			: リスト機能
	void* pObject,			: 終端に持ってきたいリスト上に存在するオブジェクト
=====================================================================*/
void MyListSetBottomObject(MyList list, void* pObject);

/*=====================================================================
リストプール数取得関数
プールしている数をしゅとくする関数
	戻り値:DWORD
	引数；
	MyList list,			: リスト機能
=====================================================================*/
DWORD MyListGetNumPoolObject(MyList list);