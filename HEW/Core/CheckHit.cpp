/**********************************************************************
[[当たり判定プログラム(CheckHit.cpp)]]
	作者：早野 太智

	当たり判定に関するプログラム
***********************************************************************/
#include "CheckHit.h"

//---------------------------------------------------------------------
//	マクロ定義(同cpp内限定)
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//	構造体、列挙体、共用体宣言(同cpp内限定)
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//	プロトタイプ宣言(同cpp内限定)
//---------------------------------------------------------------------

//---------------------------------------------------------------------
// グローバル変数
//---------------------------------------------------------------------

//=============================================================================
// BBによる当たり判定処理
// 回転は考慮しない
// 戻り値：当たってたらtrue
//=============================================================================
bool CheckHitBB(D3DXVECTOR3 pos1, D3DXVECTOR3 pos2, D3DXVECTOR3 size1, D3DXVECTOR3 size2)
{
	D3DXVECTOR3 min1, max1;
	D3DXVECTOR3 min2, max2;

	min1.x = pos1.x - size1.x;
	min1.y = pos1.y - size1.y;
	min1.z = pos1.z - size1.z;
	max1.x = pos1.x + size1.x;
	max1.y = pos1.y + size1.y;
	max1.z = pos1.z + size1.z;

	min2.x = pos2.x - size2.x;
	min2.y = pos2.y - size2.y;
	min2.z = pos2.z - size2.z;
	max2.x = pos2.x + size2.x;
	max2.y = pos2.y + size2.y;
	max2.z = pos2.z + size2.z;

	// X軸の判定
	if (min1.x < max2.x && max1.x > min2.x)
	{
		// Y軸の判定
		if (min1.y < max2.y && max1.y > min2.y)
		{
			// Z軸の判定
			if (min1.z < max2.z && max1.z > min2.z)
			{
				// 全ての条件がTRUEならヒット判定
				return true;
			}
		}
	}

	return false;
}

//=============================================================================
// BCによる当たり判定処理
// サイズは半径
// 戻り値：当たってたらtrue
//=============================================================================
bool CheckHitBC(D3DXVECTOR3 pos1, D3DXVECTOR3 pos2, float size1, float size2)
{
	// pos1とpos2をつなぐベクトルを作る
	D3DXVECTOR3 vDistance = pos1 - pos2;
	float length;
	// vDistanceのベクトル長を得る
	length = D3DXVec3Length(&vDistance);
	// 1と2の半径を足して判定する
	// 差分のベクトル長の方が小さければ
	// ヒットしている
	if (length < (size1 + size2))
	{
		return true;
	}

	return false;
}

